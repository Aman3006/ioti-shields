namespace com.ibm.iot4i.examples ;

use com.ibm.iot4i.hazards.MH::* ;
use com.ibm.iot4i.events.MH::* ;
use com.ibm.iot4i.models::Hazard ;
use com.ibm.streams.geospatial.ext::* ;
use com.ibm.streams.geospatial.st::* ;
type SensorEventDataSchema = rstring userId, rstring key, rstring message,
	rstring WKTLocation ;
type WeatherDataSchema = rstring message, rstring zipCode, rstring WKTLocation,
	int32 temperature ;

composite SevereWeatherShield
{
	param
	// Kafka params
		expression<rstring> $KAFKA_BROKERS_SASL :
			getSubmissionTimeValue("KAFKA_BROKERS_SASL") ;
		expression<rstring> $USERNAME : getSubmissionTimeValue("USERNAME") ;
		expression<rstring> $PASSWORD : getSubmissionTimeValue("PASSWORD") ;
		expression<rstring> $SOURCE_TOPIC : getSubmissionTimeValue("SOURCE_TOPIC") ;
		expression<rstring> $SINK_TOPIC : getSubmissionTimeValue("SINK_TOPIC") ;
		expression<rstring> $WEATHER_TOPIC :
			getSubmissionTimeValue("WEATHER_TOPIC") ;

			// Other params
		expression<rstring> $SHIELD_ID : getSubmissionTimeValue("SHIELD_ID") ;
	graph
		stream<SensorEventDataSchema> SensorEventData = SensorEventsOp()
		{
			param
				KAFKA_BROKERS_SASL : $KAFKA_BROKERS_SASL ;
				USERNAME : $USERNAME ;
				PASSWORD : $PASSWORD ;
				SOURCE_TOPIC : $SOURCE_TOPIC ;
		}

		stream<WeatherDataSchema> WeatherEventData = WeatherDataOp()
		{
			param
				KAFKA_BROKERS_SASL : $KAFKA_BROKERS_SASL ;
				USERNAME : $USERNAME ;
				PASSWORD : $PASSWORD ;
				WEATHER_TOPIC : $WEATHER_TOPIC ;
		}

		stream<Hazard> HazardStream = Join(WeatherEventData ; SensorEventData)
		{
			window
				WeatherEventData : sliding, count(0), count(1), partitioned ;
				SensorEventData : sliding, time(30), count(1), partitioned ;
			param
				match : contains(WeatherEventData.WKTLocation, SensorEventData.WKTLocation)
					&& WeatherEventData.temperature > 42 ;
				algorithm : inner ;
				partitionByLHS : WeatherEventData.zipCode ;
				partitionByRHS : SensorEventData.userId ;
			output
				HazardStream : userId = SensorEventData.userId, rawEvents = "[" +
					SensorEventData.message + "," + WeatherEventData.message + "]",
					actionParams =
					"{\"hazardTitle\" : \"A severe weather has been detected.\", \"emailSubject\":\"Alert from IoT for Insurance\", \"emailText\" :\"Hello IoT for Insurance user. You have a hazard!!!\"}" ;
		}

		//  Submitting Hazards
		@catch(exception = all, tupleTrace = true, stackTrace = true)
		() as sink = SubmitHazards(HazardStream)
		{
			param
				KAFKA_BROKERS_SASL : $KAFKA_BROKERS_SASL ;
				USERNAME : $USERNAME ;
				PASSWORD : $PASSWORD ;
				TOPIC : $SINK_TOPIC ;
				SHIELD_ID : $SHIELD_ID ;
		}

}

composite SensorEventsOp(output stream<SensorEventDataSchema> SensorEventData )
{
	param
		expression<rstring> $KAFKA_BROKERS_SASL ;
		expression<rstring> $USERNAME ;
		expression<rstring> $PASSWORD ;
		expression<rstring> $SOURCE_TOPIC ;
	graph
		(stream<rstring userId, rstring key, rstring message> SourceStream) as
			source = AnnotatedSource()
		{
			param
				KAFKA_BROKERS_SASL : $KAFKA_BROKERS_SASL ;
				USERNAME : $USERNAME ;
				PASSWORD : $PASSWORD ;
				TOPIC : $SOURCE_TOPIC ;
		}

		(stream<rstring userId, rstring key, rstring message> FilteredStream) as
			filter = Filter(SourceStream)
		{
			param
				filter : eventEntryCondition(message) ;
		}

		stream<SensorEventDataSchema> SensorEventData = Functor(FilteredStream)
		{
			logic
				state :
				{
					mutable rstring _WKTLocation ;
				}

				onTuple FilteredStream :
				{
					println("Sensor Event Data:") ;
					println(message) ;
					_WKTLocation = getLocationAsWKT(message, true) ;
				}

			output
				SensorEventData : userId = userId, key = key, message = message,
					WKTLocation = _WKTLocation ;
		}

}

composite WeatherDataOp(output stream<WeatherDataSchema> WeatherData )
{
	param
		expression<rstring> $KAFKA_BROKERS_SASL ;
		expression<rstring> $USERNAME ;
		expression<rstring> $PASSWORD ;
		expression<rstring> $WEATHER_TOPIC ;
	graph
		(stream<rstring key, rstring message> RawWeatherData) as source = Source()
		{
			param
				KAFKA_BROKERS_SASL : $KAFKA_BROKERS_SASL ;
				USERNAME : $USERNAME ;
				PASSWORD : $PASSWORD ;
				TOPIC : $WEATHER_TOPIC ;
				GROUP_ID : "group_source_weather_data_source_job_" +(rstring) jobID() ;
				CLIENT_ID : "consumer_weather_data_source_job_" +(rstring) jobID() + "_"
					+(rstring) getChannel() ;
		}

		(stream<rstring key, rstring message> FilteredStream) as filter =
			Filter(RawWeatherData)
		{
			param
				filter : weatherEntryCondition(message) ;
		}

		stream<WeatherDataSchema> WeatherData = Functor(FilteredStream)
		{
			logic
				state :
				{
					mutable rstring _WKTLocation ;
					mutable rstring _zipCode ;
					mutable int32 _temperature ;
				}

				onTuple FilteredStream :
				{
					println("Weather Data:") ;
					println(message) ;
					_WKTLocation = getLocationAsWKT(message, false) ;
					_temperature = getTemperature(message) ;
					_zipCode = getZipCode(message) ;
				}

			output
				WeatherData : message = message, zipCode = _zipCode, WKTLocation =
					_WKTLocation, temperature = _temperature ;
		}

}